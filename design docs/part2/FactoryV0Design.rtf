{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red226\green46\blue19;\red142\green179\blue109;\red104\green147\blue66;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf2 Section 2 Agent 1: Conveyor Agent
\f1\b0\fs24 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Data\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 Queue<Glass> glass; \cf3 /\cf4 / public glass class shared between all agents
\f1\fs24 \cf0 \

\f0\fs30 List<Sensor> sensors;\cf3  \cf4 // public sensor class shared between all agents
\f1\fs24 \cf0 \

\f0\fs30 MyPopup popup;
\f1\fs24 \

\f0\fs30 bool moving;
\f1\fs24 \
\

\f0\fs30 Transducer t;
\f1\fs24 \
\

\f0\fs30 private class MyPopup(Popup popup)\{
\f1\fs24 \

\f0\fs30 	Popup popup;
\f1\fs24 \

\f0\fs30 	public enum status \{up, down, moving\}
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Messages\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void msgPopupDown(boolean down)\{
\f1\fs24 \

\f0\fs30 	popup.status = Status.down;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Scheduler\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 if sensorBeforePopup == On
\f1\fs24 \

\f0\fs30 	then if popup.Status == down
\f1\fs24 \

\f0\fs30 		then putGlassOnPopup()
\f1\fs24 \

\f0\fs30 	else if popup.Status == up
\f1\fs24 \

\f0\fs30 		then stopMoving()
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Actions\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void stopMoving()\
\{\
	moving = false; 
\f1\fs24 \

\f0\fs30 	t.fireEvent(StopMoving);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 public void putGlassOnPopup()\{
\f1\fs24 \

\f0\fs30 	popup.msgHereIsGlass(glass.pop());
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf2 Section 2 Agent 2: Robot Agent 
\f1\b0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Data\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 Transducer t;
\f1\fs24 \

\f0\fs30 Glass glass;
\f1\fs24 \

\f0\fs30 bool working;
\f1\fs24 \

\f0\fs30 Popup popup;
\f1\fs24 \

\f0\fs30 GlassRecipe recipe;
\f1\fs24 \

\f0\fs30 WorkStation station;
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Messages\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void msgGlassReadyForWork(Glass glass) \{
\f1\fs24 \

\f0\fs30 	this.glass = glass;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Scheduler\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 if (the recipe doesn\'92t call for the robot to do anything on the piece that\'92s on the sensor) \{
\f1\fs24 \

\f0\fs30 	TellPopupBypass();
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 if (glass != void && !working) \{
\f1\fs24 \

\f0\fs30 	DoWork();
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 if (glass.Status == done) \{
\f1\fs24 \

\f0\fs30 	TellWorkstationDone();
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Actions\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 private void TellPopupBypass() \{
\f1\fs24 \

\f0\fs30 	popup.msgBypass(); 
\f1\fs24 \

\f0\fs30 	t.fireEvent(PopupDown);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 private void TellWorkstationDone() \{
\f1\fs24 \

\f0\fs30 	workstation.msgJobDone(finishedGlass);
\f1\fs24 \

\f0\fs30 	this.glass = null;
\f1\fs24 \

\f0\fs30 	t.fireEvent(MoveGlass);
\f1\fs24 \

\f0\fs30 \}	
\f1\fs24 \

\f0\fs30 private void DoWork() \{
\f1\fs24 \

\f0\fs30 	working = true;
\f1\fs24 \

\f0\fs30 	t.fireEvent(WorkOnGlass);
\f1\fs24 \

\f0\fs30 	new TimerTask(wait for a bit for the animation);
\f1\fs24 \

\f0\fs30 	station.msgJobDone();
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf2 Section 2 Agent 3: Workstation Agent
\f1\b0\fs24 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Data\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 Popup popup;
\f1\fs24 \

\f0\fs30 Transducer t;
\f1\fs24 \

\f0\fs30 Glass glass;
\f1\fs24 \

\f0\fs30 boolean working;
\f1\fs24 \

\f0\fs30 Robot robot;
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Messages\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void msgHereIsGlass(glass) \{
\f1\fs24 \

\f0\fs30 	this.glass = glass;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 public void msgJobDone(finishedGlass) \{
\f1\fs24 \

\f0\fs30 	working = false;	
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Scheduler\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 if (working = false and glass = done)\{
\f1\fs24 \

\f0\fs30 	passToPopup(finishedGlass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 else if (working = false and glass = notdone) \{
\f1\fs24 \

\f0\fs30 	tellRobotToWork(glass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 	
\f1\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Actions\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void passToPopup(finishedGlass)\{
\f1\fs24 \

\f0\fs30 	this.glass = null;
\f1\fs24 \

\f0\fs30 	t.fireEvent(MoveToPopup);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\

\f0\fs30 public void tellRobotToWork(glass)\{
\f1\fs24 \

\f0\fs30 	working = true;
\f1\fs24 \

\f0\fs30 	t.fireEvent(PassGlass);
\f1\fs24 \

\f0\fs30 	robot.msgGlassReadyToWork(glass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf2 Section 2 Agent 4: Popup Agent
\f1\b0\fs24 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Data\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 bool bypass; \cf4 // true if the part should not be worked on at that workstation
\f1\fs24 \cf0 \

\f0\fs30 int numGlassMoved; \cf4 // count to choose which WS odd = 1, even = 2
\f1\fs24 \cf0 \

\f0\fs30 Workstation station1;
\f1\fs24 \

\f0\fs30 Workstation station2;
\f1\fs24 \

\f0\fs30 Glass glass; \cf4 // reference to the glass that\'92s on the popup
\f1\fs24 \cf0 \

\f0\fs30 List<Conveyor> conveyors; \cf4 // depending on the location of the popup it may have more than one reference to a conveyor
\f1\fs24 \cf0 \

\f0\fs30 public enum Status \{up, down, moving\}
\f1\fs24 \

\f0\fs30 Transducer t;
\f1\fs24 \

\f0\fs30 Sensor sensor;
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Messages\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void msgHereIsGlass(glass) \{\
	this.glass = glass;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 public void msgBypass() \{
\f1\fs24 \

\f0\fs30 	bypass = true;
\f1\fs24 \

\f0\fs30 	status = Status.down;
\f1\fs24 \

\f0\fs30 \}	
\f1\fs24 \

\f0\fs30 public void msgJobDone(Glass finishedGlass)\{
\f1\fs24 \

\f0\fs30 	passGlassToConveyor(finishedGlass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Scheduler\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 if (status == Status.down && bypass) \{
\f1\fs24 \

\f0\fs30 	passGlassToConveyer(Glass finishedGlass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 if(status == Status.down && !bypass && glass != null) \{
\f1\fs24 \

\f0\fs30 	status = Status.up;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 if(status == Status.up && !glassIsFinished)\{
\f1\fs24 \

\f0\fs30 	deliverGlassToWorkStation(glass);
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \

\f0\fs30 if(status == Status.up && glassIsFinished)\{
\f1\fs24 \

\f0\fs30 	status = Status.down;
\f1\fs24 \

\f0\fs30 \}
\f1\fs24 \
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs30 \cf0 * * * \ul Actions\ulnone  * * *
\f1\b0\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 public void deliverGlassToWorkStation(glass)\{
\f1\fs24 \
\pard\pardeftab720\li960\ql\qnatural

\f0\fs30 \cf0 if (numGlassMoved % 2)
\f1\fs24 \

\f0\fs30 	station1.msgHereIsGlass(glass);
\f1\fs24 \

\f0\fs30 	t.eventFired(MoveGlass);
\f1\fs24 \

\f0\fs30 else
\f1\fs24 \
\pard\pardeftab720\li960\fi960\ql\qnatural

\f0\fs30 \cf0 station2.msgHereIsGlass(glass);
\f1\fs24 \

\f0\fs30 t.eventFired(MoveGlass);
\f1\fs24 \
\pard\pardeftab720\li960\ql\qnatural

\f0\fs30 \cf0 numGlassMoved++;
\f1\fs24 \

\f0\fs30 this.glass = null;
\f1\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 \}
\f1\fs24 \

\f0\fs30 public void passGlassToConveyor(Glass finishedGlass) \{
\f1\fs24 \
\
\pard\pardeftab720\fi960\ql\qnatural

\f0\fs30 \cf0 //if popup not at the end of conveyor
\f1\fs24 \

\f0\fs30 if(conveyors.size() == 1)
\f1\fs24 \
\pard\pardeftab720\li960\fi960\ql\qnatural

\f0\fs30 \cf0 conveyor.first.msgHereIsGlass(finishedGlass);
\f1\fs24 \

\f0\fs30 this.glass = null;
\f1\fs24 \

\f0\fs30 t.eventFired(MoveGlass);
\f1\fs24 \
\pard\pardeftab720\fi960\ql\qnatural

\f0\fs30 \cf0 //else if the popup is at the end of conveyor pass to the next conveyor
\f1\fs24 \

\f0\fs30 else 
\f1\fs24 \

\f0\fs30 	conveyor.last.msgHereIsGlass(finishedGlass);
\f1\fs24 \

\f0\fs30 	this.glass = null;
\f1\fs24 \
\pard\pardeftab720\li960\fi960\ql\qnatural

\f0\fs30 \cf0 t.eventFired(MoveGlass);
\f1\fs24 \
\pard\pardeftab720\ql\qnatural

\f0\fs30 \cf0 \}}